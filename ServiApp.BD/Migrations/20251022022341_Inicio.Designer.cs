// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServiApp.BD.Datos;

#nullable disable

namespace ServiApp.BD.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251022022341_Inicio")]
    partial class Inicio
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.Calificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("FechaCalificacion")
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<int>("IDCalificacion")
                        .HasColumnType("int");

                    b.Property<int>("IDnumberoMatricula")
                        .HasColumnType("int");

                    b.Property<int?>("PrestadorId")
                        .HasColumnType("int");

                    b.Property<int>("Puntuacion")
                        .HasColumnType("int");

                    b.Property<int?>("UsuariosId")
                        .HasColumnType("int");

                    b.Property<int>("idUsuario")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrestadorId");

                    b.HasIndex("UsuariosId");

                    b.ToTable("Calificaciones");
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreCategoria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Servicios de cañerías y grifos",
                            NombreCategoria = "Plomería"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Instalaciones y reparaciones eléctricas",
                            NombreCategoria = "Electricidad"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Pintado de interiores y exteriores",
                            NombreCategoria = "Pintura"
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Servicios de limpieza para el hogar y oficina",
                            NombreCategoria = "Limpieza"
                        });
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.Pago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Comision")
                        .HasMaxLength(42)
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasMaxLength(42)
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("datetime2");

                    b.Property<int>("IDPago")
                        .HasColumnType("int");

                    b.Property<int>("IDdUsuario")
                        .HasColumnType("int");

                    b.Property<int>("IDnumeroMatricula")
                        .HasColumnType("int");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MontoTotal")
                        .HasColumnType("int");

                    b.Property<int?>("PrestadorId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuariosId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrestadorId");

                    b.HasIndex("UsuariosId");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.Prestador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IDnumberoMatricula")
                        .HasColumnType("int");

                    b.Property<string>("NombrePrestador")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Prestadores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apellido = "López",
                            Email = "carlos.lopez@email.com",
                            IDnumberoMatricula = 12345,
                            NombrePrestador = "Carlos",
                            Password = "password123"
                        },
                        new
                        {
                            Id = 2,
                            Apellido = "Fernández",
                            Email = "maria.fernandez@email.com",
                            IDnumberoMatricula = 67890,
                            NombrePrestador = "María",
                            Password = "password123"
                        },
                        new
                        {
                            Id = 3,
                            Apellido = "Pérez",
                            Email = "juan.perez@email.com",
                            IDnumberoMatricula = 11111,
                            NombrePrestador = "Juan",
                            Password = "password123"
                        });
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.PrestadorServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaAsignacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("PrestadorId")
                        .HasColumnType("int");

                    b.Property<int>("ServicioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrestadorId");

                    b.HasIndex("ServicioId");

                    b.ToTable("PrestadoresServicios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FechaAsignacion = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrestadorId = 1,
                            ServicioId = 1
                        },
                        new
                        {
                            Id = 2,
                            FechaAsignacion = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrestadorId = 2,
                            ServicioId = 2
                        },
                        new
                        {
                            Id = 3,
                            FechaAsignacion = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrestadorId = 3,
                            ServicioId = 3
                        });
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.Presupuesto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaCreacion")
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaVto")
                        .HasColumnType("datetime2");

                    b.Property<int>("IDnumeroMatricula")
                        .HasColumnType("int");

                    b.Property<int>("IDpresupuesto")
                        .HasColumnType("int");

                    b.Property<int>("Monto")
                        .HasColumnType("int");

                    b.Property<int?>("PrestadorId")
                        .HasColumnType("int");

                    b.Property<string>("detalle_materiales")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("tiempoDuracion")
                        .HasMaxLength(42)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrestadorId");

                    b.ToTable("Presupuestos");
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.ServicioEnti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("IdCategoria")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombrePrestador")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("PrecioBase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("IdCategoria");

                    b.ToTable("Servicios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Arreglo de pérdidas de agua y caños rotos",
                            IdCategoria = 1,
                            Nombre = "Reparación de caños",
                            NombrePrestador = "Carlos López",
                            PrecioBase = 10m,
                            Ubicacion = "Buenos Aires"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Colocación y reparación de enchufes eléctricos",
                            IdCategoria = 2,
                            Nombre = "Instalación de enchufes",
                            NombrePrestador = "María Fernández",
                            PrecioBase = 20m,
                            Ubicacion = "Rosario"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Limpieza y destape de desagües y cañerías",
                            IdCategoria = 1,
                            Nombre = "Destape de cañerías",
                            NombrePrestador = "Juan Pérez",
                            PrecioBase = 15m,
                            Ubicacion = "Córdoba"
                        });
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.Solicitud", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Estado")
                        .HasMaxLength(100)
                        .HasColumnType("bit");

                    b.Property<DateTime>("Fecha_solicitud")
                        .HasColumnType("datetime2");

                    b.Property<int>("IDSolicitud")
                        .HasColumnType("int");

                    b.Property<int>("IdServicio")
                        .HasColumnType("int");

                    b.Property<int>("IdUsaurio")
                        .HasColumnType("int");

                    b.Property<int?>("ServicioId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuariosId")
                        .HasColumnType("int");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServicioId");

                    b.HasIndex("UsuariosId");

                    b.ToTable("Solicitudes");
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.Usuarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(42)
                        .HasColumnType("nvarchar(42)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(42)
                        .HasColumnType("nvarchar(42)");

                    b.Property<DateTime>("FechaRegistroUsuario")
                        .HasMaxLength(64)
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("idUsuario")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.Calificacion", b =>
                {
                    b.HasOne("ServiApp.BD.Datos.Entidades.Prestador", "Prestador")
                        .WithMany()
                        .HasForeignKey("PrestadorId");

                    b.HasOne("ServiApp.BD.Datos.Entidades.Usuarios", "Usuarios")
                        .WithMany()
                        .HasForeignKey("UsuariosId");

                    b.Navigation("Prestador");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.Pago", b =>
                {
                    b.HasOne("ServiApp.BD.Datos.Entidades.Prestador", "Prestador")
                        .WithMany()
                        .HasForeignKey("PrestadorId");

                    b.HasOne("ServiApp.BD.Datos.Entidades.Usuarios", "Usuarios")
                        .WithMany()
                        .HasForeignKey("UsuariosId");

                    b.Navigation("Prestador");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.PrestadorServicio", b =>
                {
                    b.HasOne("ServiApp.BD.Datos.Entidades.Prestador", "Prestador")
                        .WithMany("PrestadorServicios")
                        .HasForeignKey("PrestadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiApp.BD.Datos.Entidades.ServicioEnti", "Servicio")
                        .WithMany()
                        .HasForeignKey("ServicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prestador");

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.Presupuesto", b =>
                {
                    b.HasOne("ServiApp.BD.Datos.Entidades.Prestador", "Prestador")
                        .WithMany()
                        .HasForeignKey("PrestadorId");

                    b.Navigation("Prestador");
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.ServicioEnti", b =>
                {
                    b.HasOne("ServiApp.BD.Datos.Entidades.Categoria", "Categoria")
                        .WithMany("ServicioEnti")
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.Solicitud", b =>
                {
                    b.HasOne("ServiApp.BD.Datos.Entidades.ServicioEnti", "Servicio")
                        .WithMany()
                        .HasForeignKey("ServicioId");

                    b.HasOne("ServiApp.BD.Datos.Entidades.Usuarios", "Usuarios")
                        .WithMany()
                        .HasForeignKey("UsuariosId");

                    b.Navigation("Servicio");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.Categoria", b =>
                {
                    b.Navigation("ServicioEnti");
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.Prestador", b =>
                {
                    b.Navigation("PrestadorServicios");
                });
#pragma warning restore 612, 618
        }
    }
}
