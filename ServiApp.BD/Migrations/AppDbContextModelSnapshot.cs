// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServiApp.BD.Datos;

#nullable disable

namespace ServiApp.BD.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.Calificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("FechaCalificacion")
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<int>("IDCalificacion")
                        .HasColumnType("int");

                    b.Property<int>("IDnumberoMatricula")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<int?>("PrestadorId")
                        .HasColumnType("int");

                    b.Property<int>("Puntuacion")
                        .HasColumnType("int");

                    b.Property<int?>("UsuariosId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrestadorId");

                    b.HasIndex("UsuariosId");

                    b.ToTable("Calificaciones");
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreCategoria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Reparacion de caños, grifos, desagues y sanitarios.",
                            NombreCategoria = "Plomería"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Instalaciones, reparacion y mantenimiento de sistemas electricos, enchufes, iluminacion y tableros eléctricas.",
                            NombreCategoria = "Electricidad"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Pintado de interiores y exteriores, reparacion de paredes.",
                            NombreCategoria = "Pintura"
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Servicios de limpieza para el hogar y oficina",
                            NombreCategoria = "Limpieza"
                        },
                        new
                        {
                            Id = 5,
                            Descripcion = "Servicio de cuidado de niños y adultos mayores",
                            NombreCategoria = "Niñera"
                        },
                        new
                        {
                            Id = 6,
                            Descripcion = "Instalacion y mantenimiento de artefactos de gas y deteccion de fugas.",
                            NombreCategoria = "Gasista"
                        },
                        new
                        {
                            Id = 7,
                            Descripcion = "Construccion, refaccion y reparacion de paredes, pisos,techos y estructuras",
                            NombreCategoria = "Albañileria"
                        },
                        new
                        {
                            Id = 8,
                            Descripcion = "Apertura de cerraduras, duplicado de llaves.",
                            NombreCategoria = "Cerrajeria"
                        });
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.Pago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Comision")
                        .HasMaxLength(42)
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasMaxLength(42)
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("datetime2");

                    b.Property<int>("IDPago")
                        .HasColumnType("int");

                    b.Property<int>("IDnumeroMatricula")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MontoTotal")
                        .HasColumnType("int");

                    b.Property<int?>("PrestadorId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuariosId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrestadorId");

                    b.HasIndex("UsuariosId");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.Prestador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdNumberoMatricula")
                        .HasColumnType("int");

                    b.Property<string>("NombrePrestador")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Prestadores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apellido = "López",
                            Email = "carlos.lopez@email.com",
                            IdNumberoMatricula = 12345,
                            NombrePrestador = "Carlos",
                            Password = "password123"
                        },
                        new
                        {
                            Id = 2,
                            Apellido = "Fernández",
                            Email = "maria.fernandez@email.com",
                            IdNumberoMatricula = 67890,
                            NombrePrestador = "María",
                            Password = "password123"
                        },
                        new
                        {
                            Id = 3,
                            Apellido = "Pérez",
                            Email = "juan.perez@email.com",
                            IdNumberoMatricula = 11111,
                            NombrePrestador = "Juan",
                            Password = "password123"
                        },
                        new
                        {
                            Id = 4,
                            Apellido = "González",
                            Email = "ana.gonzalez@email.com",
                            IdNumberoMatricula = 22222,
                            NombrePrestador = "Ana",
                            Password = "password123"
                        },
                        new
                        {
                            Id = 5,
                            Apellido = "Martínez",
                            Email = "roberto.martinez@email.com",
                            IdNumberoMatricula = 33333,
                            NombrePrestador = "Roberto",
                            Password = "password123"
                        },
                        new
                        {
                            Id = 6,
                            Apellido = "Rodríguez",
                            Email = "laura.rodriguez@email.com",
                            IdNumberoMatricula = 44444,
                            NombrePrestador = "Laura",
                            Password = "password123"
                        },
                        new
                        {
                            Id = 7,
                            Apellido = "Sánchez",
                            Email = "diego.sanchez@email.com",
                            IdNumberoMatricula = 55555,
                            NombrePrestador = "Diego",
                            Password = "password123"
                        },
                        new
                        {
                            Id = 8,
                            Apellido = "Torres",
                            Email = "valeria.torres@email.com",
                            IdNumberoMatricula = 66666,
                            NombrePrestador = "Valeria",
                            Password = "password123"
                        },
                        new
                        {
                            Id = 9,
                            Apellido = "Romero",
                            Email = "martin.romero@email.com",
                            IdNumberoMatricula = 77777,
                            NombrePrestador = "Martín",
                            Password = "password123"
                        },
                        new
                        {
                            Id = 10,
                            Apellido = "Morales",
                            Email = "claudia.morales@email.com",
                            IdNumberoMatricula = 88888,
                            NombrePrestador = "Claudia",
                            Password = "password123"
                        });
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.PrestadorServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaAsignacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("PrestadorId")
                        .HasColumnType("int");

                    b.Property<int>("ServicioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrestadorId");

                    b.HasIndex("ServicioId");

                    b.ToTable("PrestadoresServicios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FechaAsignacion = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrestadorId = 1,
                            ServicioId = 1
                        },
                        new
                        {
                            Id = 2,
                            FechaAsignacion = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrestadorId = 2,
                            ServicioId = 2
                        },
                        new
                        {
                            Id = 3,
                            FechaAsignacion = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrestadorId = 3,
                            ServicioId = 3
                        },
                        new
                        {
                            Id = 4,
                            FechaAsignacion = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrestadorId = 4,
                            ServicioId = 4
                        },
                        new
                        {
                            Id = 5,
                            FechaAsignacion = new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrestadorId = 5,
                            ServicioId = 5
                        },
                        new
                        {
                            Id = 6,
                            FechaAsignacion = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrestadorId = 6,
                            ServicioId = 6
                        },
                        new
                        {
                            Id = 7,
                            FechaAsignacion = new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrestadorId = 7,
                            ServicioId = 7
                        },
                        new
                        {
                            Id = 8,
                            FechaAsignacion = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrestadorId = 8,
                            ServicioId = 8
                        },
                        new
                        {
                            Id = 9,
                            FechaAsignacion = new DateTime(2024, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrestadorId = 9,
                            ServicioId = 9
                        },
                        new
                        {
                            Id = 10,
                            FechaAsignacion = new DateTime(2024, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrestadorId = 10,
                            ServicioId = 10
                        });
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.Presupuesto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Detalle_materiales")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaVto")
                        .HasColumnType("datetime2");

                    b.Property<int>("IDpresupuesto")
                        .HasColumnType("int");

                    b.Property<int>("IdNumberoMatricula")
                        .HasColumnType("int");

                    b.Property<int>("Monto")
                        .HasColumnType("int");

                    b.Property<int?>("PrestadorId")
                        .HasColumnType("int");

                    b.Property<int>("TiempoDuracion")
                        .HasMaxLength(42)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrestadorId");

                    b.ToTable("Presupuestos");
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.ServicioEnti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("IdCategoria")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombrePrestador")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("PrecioBase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("IdCategoria");

                    b.ToTable("Servicios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Arreglo de pérdidas de agua y caños rotos",
                            IdCategoria = 1,
                            Nombre = "Reparación de caños",
                            NombrePrestador = "Carlos López",
                            PrecioBase = 10m,
                            Ubicacion = "Buenos Aires"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Colocación y reparación de enchufes eléctricos",
                            IdCategoria = 2,
                            Nombre = "Instalación de enchufes",
                            NombrePrestador = "María Fernández",
                            PrecioBase = 20m,
                            Ubicacion = "Rosario"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Limpieza y destape de desagües y cañerías",
                            IdCategoria = 1,
                            Nombre = "Destape de cañerías",
                            NombrePrestador = "Juan Pérez",
                            PrecioBase = 15m,
                            Ubicacion = "Córdoba"
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Pintura profesional de ambientes interiores",
                            IdCategoria = 3,
                            Nombre = "Pintura de interiores",
                            NombrePrestador = "Ana González",
                            PrecioBase = 25m,
                            Ubicacion = "Buenos Aires"
                        },
                        new
                        {
                            Id = 5,
                            Descripcion = "Limpieza completa de hogar u oficina",
                            IdCategoria = 4,
                            Nombre = "Limpieza profunda",
                            NombrePrestador = "Roberto Martínez",
                            PrecioBase = 18m,
                            Ubicacion = "La Plata"
                        },
                        new
                        {
                            Id = 6,
                            Descripcion = "Servicio de niñera con experiencia",
                            IdCategoria = 5,
                            Nombre = "Cuidado de niños",
                            NombrePrestador = "Laura Rodríguez",
                            PrecioBase = 12m,
                            Ubicacion = "Buenos Aires"
                        },
                        new
                        {
                            Id = 7,
                            Descripcion = "Instalación segura de artefactos a gas",
                            IdCategoria = 6,
                            Nombre = "Instalación de gas",
                            NombrePrestador = "Diego Sánchez",
                            PrecioBase = 30m,
                            Ubicacion = "Rosario"
                        },
                        new
                        {
                            Id = 8,
                            Descripcion = "Reparación y construcción de paredes",
                            IdCategoria = 7,
                            Nombre = "Refacción de paredes",
                            NombrePrestador = "Valeria Torres",
                            PrecioBase = 28m,
                            Ubicacion = "Córdoba"
                        },
                        new
                        {
                            Id = 9,
                            Descripcion = "Servicio de cerrajería 24 horas",
                            IdCategoria = 8,
                            Nombre = "Apertura de cerraduras",
                            NombrePrestador = "Martín Romero",
                            PrecioBase = 22m,
                            Ubicacion = "Mendoza"
                        },
                        new
                        {
                            Id = 10,
                            Descripcion = "Revisión y mantenimiento preventivo de instalaciones eléctricas",
                            IdCategoria = 2,
                            Nombre = "Mantenimiento eléctrico",
                            NombrePrestador = "Claudia Morales",
                            PrecioBase = 24m,
                            Ubicacion = "Buenos Aires"
                        });
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.Solicitud", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasMaxLength(100)
                        .HasColumnType("bit");

                    b.Property<DateTime>("Fecha_solicitud")
                        .HasColumnType("datetime2");

                    b.Property<int>("IDSolicitud")
                        .HasColumnType("int");

                    b.Property<int>("IdServicio")
                        .HasColumnType("int");

                    b.Property<int>("IdUsaurio")
                        .HasColumnType("int");

                    b.Property<int?>("ServicioId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuariosId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServicioId");

                    b.HasIndex("UsuariosId");

                    b.ToTable("Solicitudes");
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.Usuarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(42)
                        .HasColumnType("nvarchar(42)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(42)
                        .HasColumnType("nvarchar(42)");

                    b.Property<DateTime>("FechaRegistroUsuario")
                        .HasMaxLength(64)
                        .HasColumnType("datetime2");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.Calificacion", b =>
                {
                    b.HasOne("ServiApp.BD.Datos.Entidades.Prestador", "Prestador")
                        .WithMany()
                        .HasForeignKey("PrestadorId");

                    b.HasOne("ServiApp.BD.Datos.Entidades.Usuarios", "Usuarios")
                        .WithMany()
                        .HasForeignKey("UsuariosId");

                    b.Navigation("Prestador");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.Pago", b =>
                {
                    b.HasOne("ServiApp.BD.Datos.Entidades.Prestador", "Prestador")
                        .WithMany()
                        .HasForeignKey("PrestadorId");

                    b.HasOne("ServiApp.BD.Datos.Entidades.Usuarios", "Usuarios")
                        .WithMany()
                        .HasForeignKey("UsuariosId");

                    b.Navigation("Prestador");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.PrestadorServicio", b =>
                {
                    b.HasOne("ServiApp.BD.Datos.Entidades.Prestador", "Prestador")
                        .WithMany("PrestadorServicios")
                        .HasForeignKey("PrestadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiApp.BD.Datos.Entidades.ServicioEnti", "Servicio")
                        .WithMany()
                        .HasForeignKey("ServicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prestador");

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.Presupuesto", b =>
                {
                    b.HasOne("ServiApp.BD.Datos.Entidades.Prestador", "Prestador")
                        .WithMany()
                        .HasForeignKey("PrestadorId");

                    b.Navigation("Prestador");
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.ServicioEnti", b =>
                {
                    b.HasOne("ServiApp.BD.Datos.Entidades.Categoria", "Categoria")
                        .WithMany("ServicioEnti")
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.Solicitud", b =>
                {
                    b.HasOne("ServiApp.BD.Datos.Entidades.ServicioEnti", "Servicio")
                        .WithMany()
                        .HasForeignKey("ServicioId");

                    b.HasOne("ServiApp.BD.Datos.Entidades.Usuarios", "Usuarios")
                        .WithMany()
                        .HasForeignKey("UsuariosId");

                    b.Navigation("Servicio");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.Categoria", b =>
                {
                    b.Navigation("ServicioEnti");
                });

            modelBuilder.Entity("ServiApp.BD.Datos.Entidades.Prestador", b =>
                {
                    b.Navigation("PrestadorServicios");
                });
#pragma warning restore 612, 618
        }
    }
}
