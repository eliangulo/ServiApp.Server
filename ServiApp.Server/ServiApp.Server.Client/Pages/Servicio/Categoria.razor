@page "/categorias"
@inject IHttpServicio http
@inject NavigationManager nav
@rendermode InteractiveServer

<link rel="stylesheet" href="css/servicios.css" />
<div class="page-background"></div>

<div class="container position-relative" style="z-index: 2; padding-top: 2rem; padding-bottom: 2rem;">
    <h3>Buscar por Categoría</h3>
    <div class="mb-3">
        <button class="btn btn-secondary" @onclick="VolverAServicios">
            ← Volver a Servicios
        </button>
    </div>
    @if (categorias == null)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p>Buscando categorías...</p>
        </div>
    }
    else if (categorias.Count == 0)
    {
        <div class="alert alert-warning" role="alert">
            No se encontraron categorías.
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var categoria in categorias)
            {
                <div class="col-md-6 col-lg-4 mb-3">
                    <div class="card h-100 shadow-sm">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <h5 class="card-title">@categoria.NombreCategoria</h5>
                                <span class="badge bg-primary rounded-pill">@categoria.Id</span>
                            </div>
                            <p class="card-text text-muted">@categoria.Descripcion</p>
                        </div>
                        <div class="card-footer bg-transparent">
                            <button class="btn btn-primary w-100"
                                    @onclick="() => VerPrestadoresPorCategoria(categoria.Id)">
                                <i class="bi bi-people"></i> Ver Prestadores
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<CategoriaDTO>? categorias;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await CargarCategorias();
    }
    private async Task CargarCategorias()
    {
        var response = await http.Get<List<CategoriaDTO>>("api/categoria");
        if (!response.Error && response.Respuesta != null)
        {
            categorias = response.Respuesta;
        }
        else
        {
            categorias = new List<CategoriaDTO>();
        }
    }
    private void VerPrestadoresPorCategoria(int categoriaId)
    {
        nav.NavigateTo($"/prestadores/categoria/{categoriaId}");
    }
    private void VolverAServicios()
    {
        nav.NavigateTo("/servicios");
    }
}