@page "/inicio"
@inject IHttpServicio http
@inject NavigationManager nav

<h3>Servicios Disponibles</h3>

<div class="filtros mb-3">
    <button class="btn btn-primary" @onclick="MostrarTodos">Mostrar Todos</button>
    <button class="btn btn-primary" @onclick="@IrABuscarPorCategoria">Buscar por Categoría</button>
</div>

@if (servicios == null)
{
    <p>Cargando servicios...</p>
}
else if (servicios.Count == 0)
{
    <p>No se encontraron servicios.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nombre</th>
                <th>Descripción</th>
                <th>Prestador</th>
                <th>Ubicación</th>
                <th>Precio</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var servicio in servicios)
            {
                <tr>
                    <td>@servicio.Id</td>
                    <td>@servicio.Nombre</td>
                    <td>@servicio.Descripcion</td>
                    <td>@servicio.NombrePrestador</td>
                    <td>@servicio.Ubicacion</td>
                    <td>$@servicio.PrecioBase</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<ServicioDTO> servicios = new List<ServicioDTO>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await CargarServicios();
    }

    private async Task CargarServicios()
    {
        var response = await http.Get<List<ServicioDTO>>("api/servicioController");
        if (!response.Error && response.Respuesta != null)
        {
            servicios = response.Respuesta;
        }
    }

    private async Task MostrarTodos()
    {
        await CargarServicios();
    }

    private void IrABuscarPorCategoria()
    {
        Console.WriteLine("Funciona");
        nav.NavigateTo("/categorias");
    }
}